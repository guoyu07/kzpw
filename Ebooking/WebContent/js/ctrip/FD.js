// Generated by CoffeeScript 1.6.2
(function() {
  var ChinaFlight;

  if (this['___ChinaFlight___'] != null) {
    return;
  }

  ChinaFlight = function() {
    this.$$ = function(id) {
      return $('#FD_' + id);
    };
    this.config = this.$$('ChinaFlightConfig').html();
    this.searchBox = $('#searchBox');
    this.form = this.$$('ChinaFlightForm');
    this.fltHotelForm = this.$$('ChinaFlightHotelForm');
    this.airlineCode = this.$$('AirlineSelect');
    this.classLevel = this.$$('ClassLevel');
    this.curSearchType = 'S';
    this.curAdvStyle = '';
    this.returnDateDiv = this.$$('ReturnDateDiv');
    this.exchangeBtn = this.form.find('div.s_exchange');
    this.tranCityDiv = this.$$('TranCityDiv');
    this.startDateSpan = this.$$('StartDateSpan');
    this.startSearchBtn = this.$$('StartSearch');
    this.startSearchFltHotelBtn = this.$$('StartSearchFltHotel');
    this.advOptions = this.$$('AdvOptions');
    this.advOptionsBtn = this.$$('AdvOptionsBtn');
    this.PassengerQuantity = this.$$('PassengerQuantitySelect');
    if (this.config === '') {
      throw new Error('ChinaFlightConfig is invalid');
    }
    this.config = cQuery.parseJSON(this.config.replace(/\n|\r|\t/g, ''));
    this.domain = document.domain;
    this.config.Domain = this.domain.split('.').slice(this.domain.indexOf('.hk') !== -1 ? -3 : -2).join('.');
    this.config.Flight = this.config.Flight || ("http://flights." + (this.domain.indexOf('big5.') !== -1 ? 'big5.' : '') + (this.domain.match(/(testp?|uat)/) ? RegExp.$1 + '.sh.ctriptravel.com' : 'ctrip.com') + (this.domain.indexOf('.hk') !== -1 ? '.hk' : ''));
    this.config.Hotel = this.config.Hotel || ("http://package." + (this.domain.match(/(testp?|uat)/) ? RegExp.$1 + '.sh.ctriptravel.com' : 'ctrip.com'));
    this.cityConfig = {
      jsonpSource: "http://webresource.c-ctrip.com/code/cquery/resource/address/flight/flight_new_" + this.config.charset + ".js",
      isAutoCorrect: true
    };
    if ($.browser.isIPad) {
      this.cityConfig.sort = ['^0$', '^1$', '^2$', '^3$', '^4$', '^5$', '^0', '^1', '^2', '^3', '^4', '^5', '0', '1', '2', '3', '4', '5'];
      this.cityConfig.jsonpSource = "http://webresource.c-ctrip.com/code/cquery/resource/address/flight/flight_" + this.config.charset + ".js";
    } else {
      this.cityConfig.sort = this._sort;
      this.cityConfig.template = this._template;
    }
    this.calendarConfig = {
      options: {
        autoShow: false,
        showWeek: true,
        maxDate: this.config.oneyear_today
      },
      listeners: {
        onChange: function() {}
      }
    };
    this.advStyle = {
      'D': 'searchbox_flt_in',
      'M': 'searchbox_flt_in_connect',
      'H': 's_high_level_hover'
    };
    this._autoEncode = function(o) {
      return escape(o.value());
    };
    if (this.config.charset === 'big5') {
      this._autoEncode = function(o) {
        return o.value();
      };
    }
    this.formValidate = this.form.regMod('validate', '1.1');
    this.bindEvent();
    this.regCityMod();
    this.regDateMod();
    this.regValidateMethod(this.validates().notNull);
    this.regValidateMethod(this.validates().format);
    this.regValidateMethod(this.validates().checkCity);
    this.regValidateMethod(this.validates().checkDate);
    this.bindSubmit();
    this.getStorage();
    this.setDefaultLocation();
  };

  (function() {
    var CONFIG;

    CONFIG = (function() {
      if (cQuery.config('charset').toLowerCase() === 'big5') {
        return {
          hot: '\u71B1\u9580',
          nocity: '\u8A72\u57CE\u5E02\u6C92\u6709\u6A5F\u5834',
          nearby: '\u9130\u8FD1\u6A5F\u5834\uFF1A',
          addressTip:'\u652F\u6301\u4E2D\u6587/\u62FC\u97F3/\u7C21\u62FC\u8F38\u5165',
          addressClose: '\u00D7',
          addressNotFind: '\u627E\u4E0D\u5230\uFF1A'
        };
      }
      return {
        hot: '\u70ED\u95E8',
        nocity: '\u8BE5\u57CE\u5E02\u6CA1\u6709\u673A\u573A',
        nearby: '\u90BB\u8FD1\u673A\u573A\uFF1A',
        addressTip: '\u652F\u6301\u4E2D\u6587/\u62FC\u97F3/\u7B80\u62FC\u8F93\u5165',
        addressClose: '\u00D7',
        addressNotFind: '\u627E\u4E0D\u5230\uFF1A'
      };
    })();
    if (!$.browser.isIPad) {
      this._template = {
        suggestion: '\
      <div class="address_hot" id="address_hot" style="z-index: 111; position: absolute;">\
        <div class="address_hotcity_fd"><a href="#" class="close">' + CONFIG.addressClose + '</a>\
			'+CONFIG.addressTip+'</div>\
        <div class="address_hotlist">\
            <ol class="address_hot_abb">\
                {{enum(key) data}}\
                <li><span>${key}</span></li>\
                {{/enum}}\
            </ol>\
            {{enum(key,arr) data}}\
                {{if key=="' + CONFIG.hot + '"}}\
                    <ul class="address_hot_adress layoutfix">\
                    {{each arr}}\
                    <li><a data="${data}" href="javascript:void(0);">${display}</a></li>\
                    {{/each}}\
                    </ul>\
                {{else}}\
                    <dl class="address_hot_adress layoutfix">\
                    {{enum(subKey,subArr) arr}}\
                        <dt>${subKey}</dt>\
                        <dd>\
                    {{if !subArr.length>0}}\
                    &nbsp;\
                    {{/if}}\
                        {{each subArr}}\
                        <a href="javascript:;" title="${display}" data="${data}">${display}</a>\
                        {{/each}}\
                    </dd>\
                    {{/enum}}\
                    </dl>\
                {{/if}}\
            {{/enum}}\
        </div>\
      </div>',
        filter: '\
      <div class="c_address_select">\
        <div class="c_address_wrap">\
          {{if hasResult}}{{else}}<div class="c_address_wrong">' + CONFIG.addressNotFind + '${val}</div>{{/if}}\
          <div class="c_address_list" style="">\
            {{each (i,item) list}}\
              {{if cQuery.type(item)=="string"}}\
                <label>${item}</label>\
              {{else}}\
                {{if data.split("|")[6] != ""}}\
                  <a href="javascript:void(0);" style="display: block;" class="none"><span>${left}</span>${right}-<i>' + CONFIG.nocity + '</i></a>\
                  {{each(index) data.split("|")[5].split("#")}}\
                    <a style="color:#000" href="javascript:void(0);" data="${data.split("|")[0]}|${data.split("|")[5].split("#")[index].split(" ")[0]}__"><b>.</b>' + CONFIG.nearby + '${data.split("|")[5].split("#")[index].replace("-","")}-${data.split("|")[6].split("#")[index]}\u516c\u91cc</a>\
                  {{/each}}\
                {{else}}\
                  <a href="javascript:void(0);" data="${data}" style="display: block;"><span>${left}</span>${right}</a>\
                {{/if}}\
              {{/if}}\
            {{/each}}\
          </div>\
          {{if page.max>-1}}\
            <div class="c_address_pagebreak" style="display: block;">\
              {{if page.current>0}}\
                <a href="javascript:void(0);" page="${page.current-1}">&lt;-</a>\
              {{/if}}\
              {{if page.current<2}}\
                {{loop(index) Math.min(5,page.max+1)}}\
                  <a href="javascript:void(0);"{{if page.current==index}} class="address_current"{{/if}} page="${index}">${index+1}</a>\
                {{/loop}}\
              {{else page.current>page.max-2}}\
                {{loop(index) Math.max(0,page.max-4),page.max+1}}\
                  <a href="javascript:void(0);"{{if page.current==index}} class="address_current"{{/if}} page="${index}">${index+1}</a>\
                {{/loop}}\
              {{else}}\
                {{loop(index) Math.max(0,page.current-2),Math.min(page.current+3,page.max+1)}}\
                  <a href="javascript:void(0);"{{if page.current==index}} class="address_current"{{/if}} page="${index}">${index+1}</a>\
                {{/loop}}\
              {{/if}}\
              {{if page.current<page.max}}\
                <a href="javascript:void(0);" page="${page.current+1}">-&gt;</a>\
              {{/if}}\
            </div>\
          {{/if}}\
        </div>\
      </div>',
        filterPageSize: 10,
        suggestionStyle: '\
      .address_hot {background-color: #FFFFFF;font-size: 12px;width: 332px;padding-top:5px;border:1px solid #999;}\
		.address_hotcity_fd {color: #999;height: 24px;line-height: 24px;padding:0 10px;}\
		.address_hotcity_fd .close {float:right;width:20px;height:20px;margin-top:3px;text-align:center;font:bold 16px/20px Simsun;text-decoration:none;color:#666;}\
		.address_hotlist {overflow: hidden;padding: 5px;}\
		address_hot li, .address_hot_abb, .address_hot_adress {list-style: none outside none;margin: 0;padding: 0;}\
		.address_hot_abb {border-bottom: 1px solid #5DA9E2;padding-bottom: 20px;}\
		.address_hot_abb li {color: #005DAA;cursor: pointer;float: left;height: 20px;line-height: 20px;list-style-type: none;text-align: center;}\
		.address_hot_abb li span {padding: 0 8px;}\
		.address_hot_abb li .hot_selected {background-color: #FFFFFF;border-color: #5DA9E2;border-style: solid;border-width: 1px 1px 0;color: #000000;display: block;font-weight: bold;padding: 0 7px;}\
		ul.address_hot_adress {padding-left:30px;padding-top: 4px;}\
		dl.address_hot_adress {padding-left:30px;padding-top: 4px;}\
		.address_hot_adress li {float: left;height: 24px;overflow: hidden;width: 67px;}\
		.address_hot_adress li a {border: 1px solid #FFFFFF;color: #000000;display: block;height: 22px;line-height: 22px;padding-left: 5px;}\
		.address_hot_adress li a:hover {background-color: #E8F4FF;border: 1px solid #ACCCEF;text-decoration: none;}\
		.address_hot_adress a {text-decoration: none;}\
        .address_hot_adress dt {float:left;_display:inline;width:20px;margin-left:-25px;text-align:center;font-family:Verdana;color:#E56700;line-height:22px;}\
		.address_hot_adress dd {overflow:hidden;*zoom:1;}\
		.address_hot_adress dd a {float:left;width:65px;height:22px;padding-left:5px;float:left;border:1px solid #FFFFFF;color:#000;line-height:22px;overflow:hidden;}\
		.address_hot_adress dd a:hover {border: 1px solid #ACCCEF;background-color: #E8F4FF;text-decoration: none;}',
        filterStyle: '\
        .c_address_select {font-family: Arial,Simsun;font-size: 12px;}\
		.c_address_select .c_address_wrap {background: none repeat scroll 0 0 #FFFFFF;border: 1px solid #7F9DB9;margin: 0;padding: 0 0 4px;text-align: left;width: 300px;}\
		.c_address_select .c_address_wrong {height:24px;padding:0 10px;line-height:24px;color:#C01111;}\
		.c_address_select .c_address_list {margin: 0;max-height: 600px;padding: 0;}\
		.c_address_select .c_address_list a {border-bottom: 1px solid #FFFFFF;border-top: 1px solid #FFFFFF;color: #0055AA;cursor: pointer;display: block;height: 22px;line-height: 22px;min-height: 22px;overflow: hidden;padding: 1px 9px 0;text-align: left;text-decoration: none;}\
		.c_address_select .c_address_list a:hover {background: none repeat scroll 0 0 #E8F4FF;border-bottom: 1px solid #7F9DB9;border-top: 1px solid #7F9DB9;}\
		.c_address_select .c_address_list span {float: right;font: 10px/22px verdana;margin: 0;overflow: hidden;padding: 0;text-align: right;white-space: nowrap;width: 110px;}\
		.c_address_select .c_address_pagebreak {display: none;line-height: 25px;margin: 0;padding: 0;text-align: center;}\
		.c_address_select .c_address_pagebreak a {color: #0055AA;display: inline-block;font-family: Arial,Simsun,sans-serif;font-size: 14px;margin: 0;padding: 0 4px;text-align: center;text-decoration: underline;width: 15px;}\
		.c_address_select .c_address_pagebreak a.address_current {color: #000; text-decoration: none;}\
        .c_address_select .c_address_list .nearby {color:#333;}\
		.c_address_select .c_address_list .none {cursor:default;}\
		.c_address_select .c_address_list .none:hover {border-top:1px solid #FFF;border-bottom:1px solid #FFF;background-color:#FFF;}\
		.c_address_select .c_address_list i {font-style:normal;color:#999;}\
        .address_selected { background: none repeat scroll 0 0 #FFE6A6; color: #FFFFFF; height: 22px; }\
        .c_address_list .hover {background: none repeat scroll 0 0 #E8F4FF;border-bottom: 1px solid #7F9DB9;border-top: 1px solid #7F9DB9;}',
        suggestionInit: function(obj) {
          var hotul, spans, switchTab, t, uls, v, _i, _len;

          spans = obj.find('span');
          if (spans.length === 0) {
            return;
          }
          uls = obj.find('dl');
          hotul = obj.find('ul');
          for (_i = 0, _len = uls.length; _i < _len; _i++) {
            v = uls[_i];
            hotul.push(v);
          }
          switchTab = function() {
            var _this = this;

            spans.each(function(span, i) {
              if (span[0] === _this) {
                span.addClass('hot_selected');
                hotul[i].style.display = '';
              } else {
                span.removeClass('hot_selected');
                hotul[i].style.display = 'none';
              }
            });
            obj.cover();
          };
          t = obj.find('div').first();
          if (t[0]) {
            t.css('width', '335px');
          }
          spans.bind('mousedown', switchTab);
          switchTab.apply(spans[0]);
          obj.find('.close').bind('mousedown', function () {
            this.focus();           
          });
        }
      };
    }
    this.val = function(t, b, c, d) {
      return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    };
    this.animate = function(O, H) {
      var CH, E, Htimer, TH,
        _this = this;

      E = 10;
      if (H != null) {
        TH = 0;
        CH = parseInt(O.css('height'), 10);
        if (H > CH) {
          H -= CH;
        } else {
          H = -(CH - H);
        }
        if (H !== 0) {
          Htimer = setInterval(function() {
            var HH;

            if (TH === E) {
              O = null;
              clearInterval(Htimer);
              return;
            }
            HH = Math.round(_this.val(TH++, CH, H, E));
            O.css('height', HH + 'px');
          }, 13);
        }
      }
    };
    this._sort = function(data, val, isAccurate, isReturnBest) {
      var MyFliter, k, reg1, reg2, reg3, ret;

      ret = [];
      k = 0;
      reg1 = new RegExp('@' + val.toReString() + '.+', 'i');
      reg2 = new RegExp('@.+\\|([a-z]{3},)*' + val.toReString() + '.+', 'i');
      reg3 = new RegExp('[a-z]', 'i');
      MyFliter = function(a, b) {
        var arr, isMath, sortPrioity;

        sortPrioity = 0;
        isMath = false;
        arr = b.split('|');
        if (isReturnBest) {
          if (arr[1] !== val) {
            return;
          }
          ret[k++] = {
            left: arr[0],
            right: arr[1],
            data: b,
            sortPrioity: sortPrioity
          };
        } else {
          if ('' !== arr[6]) {
            sortPrioity -= 200;
          }
          if (arr[1].indexOf('(') > 0) {
            sortPrioity -= 1;
          }
          if (arr[0].indexOf('Shanhaiguan') > -1) {
            sortPrioity -= 5;
          }
          if (1 === val.length) {
            if (reg3.test(val)) {
              isMath = reg1.test(a);
              sortPrioity += 100;
            } else {
              isMath = reg2.test(a);
              sortPrioity += 50;
            }
          } else if (1 < val.length) {
            if (reg1.test(a)) {
              sortPrioity += 100;
              isMath = true;
            }
            if (reg2.test(a)) {
              if (0 === arr[0].indexOf(val.toUpperCase())) {
                sortPrioity += 50;
              }
              if (0 === arr[2].indexOf(val.toUpperCase())) {
                sortPrioity += 10;
              }
              isMath = true;
            }
          }
          if (isMath && isNaN(val)) {
            ret[k++] = {
              left: arr[0],
              right: arr[1],
              data: b,
              priority: sortPrioity
            };
          }
        }
      };
      data.replace(new RegExp('@([^@]*' + val.toReString() + '[^@]*)', 'gi'), MyFliter);
      if (!isReturnBest) {
        ret.sort(function(a, b) {
          if (a.priority === b.priority) {
            if (a.data < b.data) {
              return -1;
            } else if (a.data > b.data) {
              return 1;
            } else {
              return 0;
            }
          } else if (a.priority > b.priority) {
            return -1;
          } else {
            return 1;
          }
        });
      }
      return ret;
    };
    this._checkForm = function(allowSubmit) {
      var v, _i, _len, _ref;

      if (allowSubmit == null) {
        allowSubmit = false;
      }
      _ref = this.v_methods;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (!v()) {
          return false;
        }
      }
      this._setAction();
      this.setStorage();
      if (allowSubmit === true) {
        if (this.PassengerQuantity.value() === '10') {
          window.open(this.form.attr('action'));
          return;
        }
        if (this.curSearchType === 'S' && this.$$('DCity1').value() !== '' && this.$$('ACity1').value() !== '') {
          this.form[0].submit();
        } else {
          window.location = this.form.attr('action');
        }
      }
      return true;
    };
    this.bindSubmit = function(e) {
      var _this = this;

      return this.form.bind('submit', function(e) {
        e.preventDefault();
        _this._checkForm(true);
        return false;
      });
    };
    this.bindEvent = function() {
      var _this = this;
	  
	  if (typeof _this.fltHotelDataLoaded === 'undefined') {
        _this._loadFltHotelData();
      }

      this.$$('flightSubSwitch input:radio').bind('click', function(e) {
        if (_this.curSearchType === this.value) {
          return;
        }
        _this.returnDateDiv.css('display', '');
        _this.tranCityDiv.css('display', 'none');
        _this.exchangeBtn.css('display', '');
        _this.startDateSpan.html(_this.config.msg.startDate);
        _this.dateMods[0].attr('tabindex', 168);
        _this.cityMods[2].attr('tabindex', 165);
        _this.startSearchFltHotelBtn.css('display', '');
        switch (_this.curSearchType = this.value) {
          case 'S':
            //_this.startSearchFltHotelBtn.css('display', '');
            _this.dateMods[2].value("");
            _this[_this.dateMods[2].attr('id') + '_notice'].method('checkValue');
            _this.dateMods[2].trigger('focus').trigger('blur');                        
            _this.returnDateDiv.addClass("s_disable");
			if (typeof _this.fltHotelDataLoaded === 'undefined') {
              _this._loadFltHotelData();
            }
            break;
          case 'D':
            //_this.returnDateDiv.css('display', '');
            //_this.startSearchFltHotelBtn.css('display', '');
            _this.returnDateDiv.removeClass("s_disable");
            if (typeof _this.fltHotelDataLoaded === 'undefined') {
              _this._loadFltHotelData();
            }
            break;
          case 'M':
            _this.startSearchFltHotelBtn.css('display', 'none');  
            _this.dateMods[0].attr('tabindex', 165);
            _this.cityMods[2].attr('tabindex', 168);
            _this.exchangeBtn.css('display', 'none');
            _this.tranCityDiv.css('display', '');
            _this.returnDateDiv.css('display', 'none');
            _this.startDateSpan.html(_this.config.msg.firstDate);
        }
        if (_this.curAdvStyle !== '' && _this.curAdvStyle !== _this.advStyle[_this.curSearchType === 'M' ? 'M' : 'D']) {
          _this._autoSetSearchBoxHeight(false);
        }
        $(_this.dateMods).each(function(d) {
          return _this[d[0].attr('id') + '_calendar'].method('setWeek', '#' + d[0].attr('id'));
        });
      });
      this.exchangeBtn.find('a').bind('click', function(e) {
        var tmp;

        e.preventDefault();
        tmp = _this.cityMods[2].value();
        if (tmp === '' && _this.cityMods[0].value() === '') {
          return;
        }
        _this.cityMods[2].value(_this.cityMods[0].value());
        _this.cityMods[0].value(tmp);
        _this[_this.cityMods[0].attr('id') + '_notice'].method('checkValue');
        _this[_this.cityMods[2].attr('id') + '_notice'].method('checkValue');
        tmp = _this.$$(_this.cityMods[2].attr('data-target')).value();
        _this.$$(_this.cityMods[2].attr('data-target')).value(_this.$$(_this.cityMods[0].attr('data-target')).value());
        return _this.$$(_this.cityMods[0].attr('data-target')).value(tmp);
      });
      this.advOptionsBtn.bind('click', function(e) {
        var status;

        e.preventDefault();
        status = _this.advOptionsBtn.hasClass(_this.advStyle['H']);
        _this.advOptionsBtn[status ? 'removeClass' : 'addClass'](_this.advStyle['H']);
        _this._autoSetSearchBoxHeight(status);
        _this.advOptions.css('display', status ? 'none' : 'block');
      });
      this.startSearchFltHotelBtn.bind('click', function(e) {
        var f, rd, t;

        if (_this._checkForm(false)) {
          f = _this.fltHotelForm[0].elements;
          f['DDate'].value = _this.dateMods[0].value();
          rd = _this.dateMods[2].value().trim();
          if (rd === '') {
            rd = _this.dateMods[0].value().toDate().addDays(2).toFormatString('yyyy-MM-dd');
          }
          f['RDate'].value = rd;
          f['DCitySZM'].value = _this.$$(_this.cityMods[0].attr('data-target')).value();
          f['DCityName'].value = _this.cityMods[0].value();
          f['ACitySZM'].value = _this.$$(_this.cityMods[2].attr('data-target')).value();
          f['ACityName'].value = _this.cityMods[2].value();
          f['Night'].value = Math.floor((rd.toDate() - _this.dateMods[0].value().toDate()) / 60000 / 60 / 24) || 1;
          if (_this.$$('flightSubSwitch input:radio')[0].checked) {
            t = "/oneway-";
          }
          else if (_this.$$('flightSubSwitch input:radio')[1].checked) {
            t = "/round-";
          }
          _this.fltHotelForm[0].action = (_this.config.Hotel + (t + _this.fltHotelStart.cityPingYing[f['DCitySZM'].value] + _this.fltHotelStart.numberCode[f['DCitySZM'].value] + "-" + _this.fltHotelDest.cityPingYing[f['ACitySZM'].value] + _this.fltHotelDest.numberCode[f['ACitySZM'].value] + "/")).toLowerCase();
          _this.fltHotelForm[0].submit();
        }
        return false;
      });
      this.form.find('input:text').bind('keydown', function(e) {
        if (e.keyCode === 13) {
          e.preventDefault();
          _this._autoSetFocus(this.id, this.value);
        }
      });
      return this.form[0].parentNode.setAttribute('Flight', true);
    };
    this._autoSetSearchBoxHeight = function(s) {
      this.curAdvStyle = s ? '' : this.advStyle[this.curSearchType === 'M' ? 'M' : 'D'];
      this.animate($('#searchBox,#searchBox>ul:first'), s ? 286 : (this.curSearchType === 'M' ? 396 : 356));
      this.animate($('#searchBox>div[Flight=true]'), s ? 261 : (this.curSearchType === 'M' ? 371 : 331));
    };
    this._loadFltHotelData = function() {
      var _this = this;

      this.fltHotelStart = {
        cityName: {},
        cityPY: {},
        cityPingYing: {},
        codeWords: {},
        numberCode: {}
      };
      this.fltHotelDest = {
        cityName: {},
        cityPY: {},
        cityPingYing: {},
        codeWords: {},
        numberCode: {}
      };
      $.loader.jsonp("http://webresource.c-ctrip.com/code/cquery/resource/address/flthotel/flthotelstart_" + this.config.charset + ".js", {
        async: true,
        onload: function(data) {
          data.data = data.data.replace(/@([^\|]*)\|([^\|]*)\|(\w?\d+)\|(\w*)\|([^@]*)/g, function(_, pingYing, name, id, PY, codeWords) {
            _this.fltHotelStart.cityName[id] = name;
            _this.fltHotelStart.cityPY[id] = PY;
            _this.fltHotelStart.cityPingYing[codeWords] = pingYing;
            _this.fltHotelStart.codeWords[id] = codeWords;
            _this.fltHotelStart.numberCode[codeWords] = id;
            return "";
          });
        }
      });
      $.loader.jsonp("http://webresource.c-ctrip.com/code/cquery/resource/address/flthotel/flthoteldest_" + this.config.charset + ".js", {
        async: true,
        onload: function(data) {
          data.data = data.data.replace(/@([^\|]*)\|([^\|]*)\|(\w?\d+)\|(\w*)\|([^@]*)/g, function(_, pingYing, name, id, PY, codeWords) {
            _this.fltHotelDest.cityName[id] = name;
            _this.fltHotelDest.cityPY[id] = PY;
            _this.fltHotelDest.cityPingYing[codeWords] = pingYing;
            _this.fltHotelDest.codeWords[id] = codeWords;
            _this.fltHotelDest.numberCode[codeWords] = id;
            return "";
          });
        }
      });
      this.fltHotelDataLoaded = true;
    };
    this.regCityMod = function() {
      var _this = this;

      if (this.cityModReged) {
        return;
      }
      this.cityMods = [this.$$('StartCity'), this.$$('TranCity'), this.$$('DestCity'), this.$$('SendTicketCity')];
      $(this.cityMods).each(function(city) {
        var name;

        name = city[0].attr('id');
        _this["" + name + "_notice"] = city[0].regMod('notice', '1.0', {
          name: name,
          tips: city[0].attr('tips') || _this.config.notice[0],
          selClass: 'inputSel'
        });
        _this["" + name + "_address"] = city[0].regMod('address', '1.0', (_this.cityConfig.name = name, _this.cityConfig)).method('bind', 'change', function(e, data) {
          var cityData, code, v, _i, _len;

          if (data.items === null || this.oldValue === data.items.name) {
            return;
          }
          this.oldValue = data.items.name;
          code = data.items.code;
          if (this.oldValue.indexOf('__') !== -1) {
            city = this.oldValue.replace(/_|-/g, '');
            cityData = _this[this.id + '_address'].source.data.split('@');
            for (_i = 0, _len = cityData.length; _i < _len; _i++) {
              v = cityData[_i];
              if (city === v.split('|')[1]) {
                this.value=city;
                code = v.split('|')[2];
                break;
              }
            }
          }
          _this.$$(this.getAttribute('data-target')).value(code);
          return _this._autoSetFocus(this.id);
        });
      });
      return this.cityModReged = true;
    };
    this.regDateMod = function() {
      var _this = this;

      if (this.dateModReged) {
        return;
      }
      this.dateMods = [this.$$('StartDate'), this.$$('TranDate'), this.$$('ReturnDate')];
      this.calendarConfig.listeners.onChange = function(o, data) {
                if (_this.curSearchType === "S"
                    && o.value.isDate()
                    && o.id === _this.dateMods[2][0].id) {
                    _this.$$('flightSubSwitch input:radio')[1].click();
                }
        if (o.oldValue === o.value) {
          return;
        }
        o.oldValue = o.value;
        _this._autoSetFocus(o.id, o.value);
      };
      $(this.dateMods).each(function(d) {
        d = d[0];
        _this[d.attr('id') + '_notice'] = d.regMod('notice', '1.0', {
          name: d.attr('id'),
          tips: 'yyyy-mm-dd',
          selClass: 'inputSel'
        });
        return _this[d.attr('id') + '_calendar'] = d.regMod('calendar', '3.0', _this.calendarConfig);
      });
      return this.dateModReged = true;
    };
    this._autoSetFocus = function(id, value) {
      var _this = this;

      return setTimeout(function() {
        return _this.__autoSetFocus(id, value);
      }, 10);
    };
    this.__autoSetFocus = function(id, value) {
      switch (id.split('_').pop()) {
        case 'StartCity':
          (this.curSearchType === 'M' ? this.dateMods[0] : this.cityMods[2])[0].focus();
          break;
        case 'TranCity':
          this.dateMods[1][0].focus();
          break;
        case 'DestCity':
          if (this.curSearchType !== 'M') {
            this.dateMods[0][0].focus();
          }
          break;
        case 'StartDate':
          this.dateMods[1].data('minDate', value);
          this.dateMods[2].data('minDate', value);
          if (this.curSearchType === 'M') {
            this.cityMods[1][0].focus();
          }
          if (this.curSearchType === 'D') {
            this.dateMods[2][0].focus();
          }
          break;
        case 'TranDate':
          this.cityMods[2][0].focus();
      }
    };
    this.validates = function() {
      var _this = this;

      return {
        notNull: function() {
          if (_this[_this.cityMods[0].attr('id') + '_notice'].method('isEmpty')) {
            _this.validateShow(_this.cityMods[0], _this.config.tip.chinaFlight[2]);
            return false;
          }
          if (_this.curSearchType !== 'M' && _this[_this.cityMods[2].attr('id') + '_notice'].method('isEmpty')) {
            _this.validateShow(_this.cityMods[2], _this.config.tip.chinaFlight[3]);
            return false;
          }
          if (_this[_this.dateMods[0].attr('id') + '_notice'].method('isEmpty')) {
            _this.validateShow(_this.dateMods[0], _this.config.tip.chinaFlight[_this.curSearchType === 'M' ? 17 : 5]);
            return false;
          }
          if (_this.curSearchType === 'M') {
            if (_this[_this.cityMods[1].attr('id') + '_notice'].method('isEmpty')) {
              _this.validateShow(_this.cityMods[1], _this.config.tip.chinaFlight[10]);
              return false;
            }
            if (_this[_this.dateMods[1].attr('id') + '_notice'].method('isEmpty')) {
              _this.validateShow(_this.dateMods[1], _this.config.tip.chinaFlight[11]);
              return false;
            }
            if (_this[_this.cityMods[2].attr('id') + '_notice'].method('isEmpty')) {
              _this.validateShow(_this.cityMods[2], _this.config.tip.chinaFlight[3]);
              return false;
            }
          }
          return true;
        },
        format: function() {
          if (!_this.dateMods[0].value().trim().isDate()) {
            _this.validateShow(_this.dateMods[0], _this.config.tip.chinaFlight[_this.curSearchType === 'M' ? 16 : 0]);
            return false;
          }
          if (_this.curSearchType === 'M' && !_this.dateMods[1].value().trim().isDate()) {
            _this.validateShow(_this.dateMods[1], _this.config.tip.chinaFlight[12]);
            return false;
          }
          if (_this.curSearchType === 'D' && _this.dateMods[2].value().trim() !== '' && !_this.dateMods[2].value().trim().isDate()) {
            _this.validateShow(_this.dateMods[2], _this.config.tip.chinaFlight[1]);
            return false;
          }
          return true;
        },
        checkCity: function() {
          if (_this.curSearchType !== 'M') {
            if (_this.cityMods[0].value() === _this.cityMods[2].value()) {
              _this.validateShow(_this.cityMods[2], _this.config.tip.chinaFlight[4]);
              return false;
            }
          } else {
            if (_this.cityMods[0].value() === _this.cityMods[1].value()) {
              _this.validateShow(_this.cityMods[1], _this.config.tip.chinaFlight[13]);
              return false;
            }
            if (_this.cityMods[1].value() === _this.cityMods[2].value()) {
              _this.validateShow(_this.cityMods[2], _this.config.tip.chinaFlight[14]);
              return false;
            }
          }
          return true;
        },
        checkDate: function() {
          if (_this.dateMods[0].value().toDate() < _this.config.today.toDate()) {
            _this.validateShow(_this.dateMods[0], _this.config.tip.chinaFlight[7].replaceWith({
              today: _this.config.today
            }));
            return false;
          }
          if (_this.dateMods[0].value().toDate() > _this.config.oneyear_today.toDate()) {
            _this.validateShow(_this.dateMods[0], _this.config.tip.chinaFlight[9]);
            return false;
          }
          if (_this.curSearchType === 'D' && _this.dateMods[2].value().trim() !== '') {
            if (_this.dateMods[2].value().toDate() < _this.dateMods[0].value().toDate()) {
              _this.validateShow(_this.dateMods[2], _this.config.tip.chinaFlight[8].replaceWith({
                startDate: _this.dateMods[0].value()
              }));
              return false;
            }
            if (_this.dateMods[2].value().toDate() > _this.config.oneyear_today.toDate()) {
              _this.validateShow(_this.dateMods[2], _this.config.tip.chinaFlight[9]);
              return false;
            }
          }
          if (_this.curSearchType === 'M') {
            if (_this.dateMods[1].value().toDate() < _this.dateMods[0].value().toDate()) {
              _this.validateShow(_this.dateMods[1], _this.config.tip.chinaFlight[15].replaceWith({
                startDate: _this.dateMods[0].value()
              }));
              return false;
            }
            if (_this.dateMods[1].value().toDate() > _this.config.oneyear_today.toDate()) {
              _this.validateShow(_this.dateMods[1], _this.config.tip.chinaFlight[9]);
              return false;
            }
          }
          return true;
        }
      };
    };
    this._toUrlString = function(o) {
      var k, ret, v;

      ret = [];
      for (k in o) {
        v = o[k];
        if (o.hasOwnProperty(k) && v !== '') {
          ret.push("" + k + "=" + v);
        }
      }
      return ret.join('&');
    };
    this._getPublicParams = function() {
      var params;

      params = {
        DDate1: escape(this.dateMods[0].value()),
        DDate2: escape(this.dateMods[this.curSearchType === 'M' ? 1 : 2].value()),
        DCityName1: this._autoEncode(this.cityMods[0]),
        ACityName1: this._autoEncode(this.cityMods[this.curSearchType === 'M' ? 1 : 2])
      };
      if (this.curSearchType === 'M') {
        params['ACity2'] = this.$$('ACity1').value();
        params['ACityName2'] = this._autoEncode(this.cityMods[2]);
      }
      return this._toUrlString(params);
    };
    this._setAction = function() {
      var url;

      if (this.PassengerQuantity.value() === '10') {
        url = {
          DCity1: this.$$('DCity1').value(),
          ACity1: this.$$('ACity1').value(),
          PassengerQuantity: 10,
          PassengerType: 'ADU',
          FlightSearchType: this.curSearchType
        };
        if (this.classLevel.value() !== '') {
          url['ClassType'] = this.classLevel.value();
        }
        if (this.airlineCode.value() !== '') {
          url['Filter'] = escape('airline:' + this.airlineCode.value());
          url['Airline'] = this.airlineCode.value();
        }
        this.form.attr('action', this.config.Flight + ("/Domestic/MyToolBox/FlightTeamOrder.aspx?" + (this._toUrlString(url)) + "&" + (this._getPublicParams())));
        return;
      }
      if (this.$$('DCity1').value() === '' || this.$$('ACity1').value() === '') {
        this.form.attr('action', this.config.Flight + ("/Domestic/Search/FirstRoute/?" + (this._getPublicParams()) + "&SendTicketCity=" + (this._autoEncode(this.cityMods[3]))));
        return;
      }
      if (this.curSearchType === 'S' || (this.curSearchType === 'D' && this.dateMods[2].value() === '')) {
        this.curSearchType = 'S';
        this.form.attr('action', this.config.Flight + ("/booking/" + (this.$$('DCity1').value()) + "-" + (this.$$('ACity1').value()) + "-day-1.html"));
        if (this.cityMods[3].value() === '') {
          this.cityMods[3].attr('name', '');
        }
        return;
      }
      url = {
        Dayoffset: Math.floor((this.dateMods[0].value().toDate().getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) + 1
      };
      if (this.cityMods[3].value() !== '') {
        url['SendTicketCity'] = this._autoEncode(this.cityMods[3]);
      }
      this.form.attr('action', this.config.Flight + ("/booking/" + (this.$$('DCity1').value()) + "-" + (this.curSearchType === 'M' ? this.$$('TransitCity').value() : this.$$('ACity1').value()) + "-" + (this.classLevel.value()) + "-" + (this.airlineCode.value()) + "-" + this.curSearchType + "-ADU-" + (this.PassengerQuantity.value()) + "/?" + (this._toUrlString(url)) + "&" + (this._getPublicParams())));
    };
    this.setStorage = function() {
      var cfConfig, prefix;

      cfConfig = {
        FlightType: this.curSearchType,
        StartCity: this.cityMods[0].value(),
        DCity1: this.$$('DCity1').value(),
        TranCity: this.cityMods[1].value(),
        TransitCity: this.$$('TransitCity').value(),
        DestCity: this.cityMods[2].value(),
        ACity1: this.$$('ACity1').value(),
        SendTicketCity: this.cityMods[3].value(),
        StartDate: this.dateMods[0].value(),
        TranDate: this.dateMods[1].value(),
        ReturnDate: this.dateMods[2].value(),
        PassengerQuantitySelect: this.PassengerQuantity.value(),
        AirlineSelect: this.airlineCode.value(),
        ClassLevel: this.classLevel.value(),
        AdvStyle: this.curAdvStyle
      };
      prefix = this.config.charset === 'big5' ? 'B' : '';
      this.setCookie(prefix + 'LastSearchSearchType', cfConfig.FlightType);
      return this.setCookie(prefix + ("LastSearch_" + cfConfig.FlightType), escape([cfConfig.FlightType, cfConfig.StartCity, cfConfig.DCity1, cfConfig.StartDate, cfConfig.DestCity, cfConfig.ACity1, cfConfig.FlightType === 'M' ? cfConfig.TranDate : cfConfig.ReturnDate, cfConfig.TranCity, cfConfig.TransitCity].join('$')));
    };
    this.setDefaultLocation = function(ip) {
      var _this = this;
      
	  if (this.cityMods[0].value() === '') {	    
        return $.loader.jsonp(this.config.Flight + "/Domestic/API/GetNameByIP", {
          async: true,
          onload: function(ret) {
            _this.cityMods[0].value(ret.data.Name);
            _this[_this.cityMods[0].attr('id') + '_notice'].method('checkValue');
            return _this.$$(_this.cityMods[0].attr('data-target')).value(ret.data.Code);
          }
        });
      }	  
    };
    this.getStorage = function() {
      var cType, data, i, prefix, tId, v, _i, _len,
        _this = this;

      prefix = this.config.charset === 'big5' ? 'B' : '';
      cType = this.getCookie(prefix + 'LastSearchSearchType');
      if (cType != null) {
        this.$$("flightSubSwitch input:radio[MM=" + cType + "]").trigger('click')[0].checked = true;
        data = this.getCookie(prefix + ("LastSearch_" + cType)).split('$');
        if (data != null) {
          tId = ['StartCity', 'DCity1', 'StartDate', 'DestCity', 'ACity1', cType === 'M' ? 'TranDate' : 'ReturnDate', 'TranCity', 'TransitCity'];
          data.shift();
          for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
            v = data[i];
            if (v !== '') {
              this.$$(tId[i]).value(v);
              this.$$(tId[i])[0].oldValue = v;
            }
          }
        }
      }
      $(this.cityMods).each(function(city) {
        _this[city[0].attr('id') + '_notice'].method('checkValue');
      });
      $(this.dateMods).each(function(d) {
        _this[d[0].attr('id') + '_notice'].method('checkValue');
      });
      if (this.dateMods[0].value() !== '') {
        this.dateMods[1].data('minDate', this.dateMods[0].value());
        this.dateMods[2].data('minDate', this.dateMods[0].value());
      }
    };
    this.validateShow = function(obj, message) {
      this.formValidate.method('show', {
        $obj: obj,
        data: message,
        removeErrorClass: true,
        hideEvent: 'blur',
        isFocus: true
      });
    };
    this.regValidateMethod = function(f) {
      return this.v_methods.push(f);
    };
    this.v_methods = [];
    this.setCookie = function(name, val) {
      var exp;

      exp = new Date();
      exp.setTime(exp.getTime() + 2592000000);
      return document.cookie = name + ("=" + val + "; expires=" + (exp.toGMTString()) + "; path=/; domain=" + this.config.Domain);
    };
    this.getCookie = function(name) {
      var arr;

      arr = document.cookie.match(new RegExp("(?:^|;)\\s*" + name + "=([^;]+)"));
      if (arr) {
        return unescape(arr[1]);
      }
      return null;
    };
    return this;
  }).call(ChinaFlight.prototype);

  this['___ChinaFlight___'] = new ChinaFlight;

}).call(this);/*****env:4,update:2013-6-28 13:06:07*****//*****env:2,update:2013-7-24 18:35:09*****//*****env:4,update:2013-9-3 14:06:02*****/