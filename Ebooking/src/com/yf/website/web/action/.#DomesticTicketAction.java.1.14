package com.yf.website.web.action;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import com.ccservice.b2b2c.base.aircompany.Aircompany;
import com.ccservice.b2b2c.base.cityairport.Cityairport;
import com.ccservice.b2b2c.base.customeruser.Customeruser;
import com.ccservice.b2b2c.base.flightinfo.FlightInfo;
import com.ccservice.b2b2c.base.flightinfo.FlightSearch;
import com.ccservice.b2b2c.base.helpcenter.Helpcenter;
import com.ccservice.b2b2c.base.helpcenterinfo.Helpcenterinfo;
import com.ccservice.b2b2c.base.infocontent.Infocontent;
import com.ccservice.b2b2c.base.informationinfo.Informationinfo;
import com.ccservice.b2b2c.base.infotype.Infotype;
import com.ccservice.b2b2c.base.segmentinfo.Segmentinfo;
import com.yf.website.web.server.Server;
import com.opensymphony.webwork.ServletActionContext;
import com.opensymphony.xwork.ActionContext;

/**
 * 国内机票Action
 * @Date 2011-11-14
 * @author 陈星
 *
 */

public class DomesticTicketAction extends TicketCommonAction {

	/**
	 **定义公共变量*************************开始************************************* 
	 * @author 陈星
	 * @Date 2011-11-14
	 * 
	 */
	//航程类型 1单程 2往返 3联程
	public int s_traveltype = 1;
	//出发城市三字码
	public String s_depcitycode;
	//出发城市名称
	public String s_depcityname;
	//到达城市名称
	public String s_arrcityname;
	//到达城市三字码
	public String s_arrcitycode;
	//出发时间
	public String s_startdate;
	//返程时间
	public String s_backdate;
	//航空公司代码
	public String s_aircompanycode;
	//第一程标识
	private int s_travelflag=1;
	//航空公司信息
	public List<Aircompany> listAirCompany;
	//航班信息List
	private List<FlightInfo> listFlightInfoAll;
	//航程信息Jason字符串
	private String s_jasonsegmentinfo;
	private String randno;
	private Integer isBackOrTo;
	private FlightSearch flightSearch=new FlightSearch();
	private String lowersegmentstr = "";
	private List lowersegment = new ArrayList();
	//航程信息List
	private List<Segmentinfo> listsegmentinfo=new ArrayList<Segmentinfo>();
	private List<Segmentinfo> lissegtempt=new ArrayList<Segmentinfo>();

  
	/**
	 **定义机票相关帮助信息*************************开始************************************* 
	 * @author 陈星
	 * @Date 2011-11-21
	 * 
	 */
		//帮助信息list
		public List<Helpcenterinfo> Listhelpcenterinfo;
		//资讯信息list
		public List<Informationinfo> ListInformationinfo;
		//帮助类型	ID
		public long typeid;

    /**定义机票相关帮助信息**************************结束************************************ 
			
		
	
	/**
	 * 机票查询方法
	 * @return 返回到列表页面
	 * @throws Exception
	 * @author 陈星
	 * @Date 2011-11-14
	 */
	public String toTicketList() throws Exception {

		System.out.println("执行机票查询方法");
		//航班查询条件赋值
		FlightSearch searchParam = new FlightSearch();
		//出发城市三字码
		searchParam.setStartAirportCode(s_depcitycode);
		//出发城市名称
		searchParam.setStartAirPortName(s_depcityname);
		//到达城市三字码
		searchParam.setEndAirportCode(s_arrcitycode);
		//到达城市名称
		searchParam.setEndAirPortName(s_arrcityname);
		//出发日期
		searchParam.setFromDate(s_startdate);
		//出发时间
		searchParam.setFromTime("");
		//返程日期
		searchParam.setBackDate(s_backdate);
		//航空公司代码
		searchParam.setAirCompanyCode(s_aircompanycode);
		//航程类型
		searchParam.setTravelType(String.valueOf(s_traveltype));
		if(s_traveltype==2 && s_travelflag==2)
		{
			String strFromCity=searchParam.getStartAirportCode();
			String strToCity=searchParam.getEndAirportCode();
			searchParam.setStartAirportCode(strToCity);
			searchParam.setEndAirportCode(strFromCity);
			searchParam.setFromDate(searchParam.getBackDate());
			//将json字符串转换程Segmentinfo集合
			listsegmentinfo=getSelectedSegment(s_jasonsegmentinfo);
		}
		//调用查询航班方法
		listFlightInfoAll = AVOpen(searchParam, s_traveltype);
		//从缓存中得到航空公司信息
		listAirCompany=Server.getInstance().getTicketSearchService().getAircompanyCache();
		//查询帮助信息
		//添加人:陈星
		//添加时间:2011-11-21
		seachInfocontent();
		return "tolist";

	}

	/**
	 * 调用接口查询航班信息
	 * @author 陈星
	 * @Date 2011-11-14
	 * @param flightSearch 航班查询条件
	 * @param intType  航程类型
	 * @return  航班信息列表
	 */
	public List<FlightInfo> AVOpen(FlightSearch flightSearch, int intType) {
		List<FlightInfo> list = Server.getInstance().getTicketSearchService()
				.findAllFlightinfo(flightSearch);
		return list;
	}

	
	/**
	 * 跳转到创建订单页面
	 * @param s_jasonsegmentinfo Json格式的Segmentinfo
	 * @author 陈星
	 * @createtime:2011-11-21
	 * @return
	 */
	public String toCreateOrder()
	{
		listsegmentinfo=null;
		System.out.println("输出Json选中航程信息："+s_jasonsegmentinfo);
		
		//将json字符串转换程Segmentinfo集合
		listsegmentinfo=getSelectedSegment(s_jasonsegmentinfo);
		System.out.println("Json转换完成:"+listsegmentinfo.toString());
		
		//从缓存中得到航空公司信息
		listAirCompany=Server.getInstance().getTicketSearchService().getAircompanyCache();
		
		//陈星更新,读取相关信息  更新时间:2011-11-23
		seachInfocontent();
		return "tocreateorder";
	}
	
	
	
	/**
	 * 将json字符串转换程Segmentinfo集合
	 * @param strJson  json字符串,选中航程信息
	 * @return  Segmentinfo集合
	 * @author 陈星
	 * @createtime 2011-11-21
	 */
	public List<Segmentinfo> getSelectedSegment(String strJson)
	{
		String[] ArrSegment={};
		//字符串转换成Json对象
		ArrSegment=s_jasonsegmentinfo.split("@");
        for(int j=0;j<ArrSegment.length;j++)
        {
			JSONObject jsonSegmentinfo = JSONObject.fromObject(ArrSegment[j].toString());
			JSONArray jsons = jsonSegmentinfo.getJSONArray("segmentinfos");
			System.out.println("Json航程个数:"+jsonSegmentinfo.size());
			//循环对航程信息类赋值
			for(int i=0;i<jsons.size();i++)
			{
				JSONObject segmentJson = JSONObject.fromObject(jsons.get(i));
				System.out.println("Segment个数:"+segmentJson.getString("flightnumber"));
				//航程赋值
				Segmentinfo segment=new Segmentinfo();
				//航空公司代码
				segment.setAircomapnycode(segmentJson.getString("aircomapnycode"));
				//航班号
				segment.setFlightnumber(segmentJson.getString("flightnumber"));
				//航空公司名称
				segment.setAircompanyname(segmentJson.getString("airname"));
				//机建费
				segment.setAirportfee(Float.parseFloat(converNull(segmentJson.getString("airportfee"),0f).toString()));
				//燃油费
				segment.setFuelfee(Float.parseFloat(converNull(segmentJson.getString("fuelfee"),0f).toString()));
				//出发时间
				segment.setDeparttime(dateToTimestamp(segmentJson.getString("departtime")));
				//到达时间
				segment.setArrivaltime(dateToTimestamp(segmentJson.getString("arrivaltime")));
				//舱位代码
				segment.setCabincode(segmentJson.getString("cabincode"));
				//折扣
				segment.setDiscount(Float.parseFloat(converNull(segmentJson.getString("discount"),0f).toString()));
				//出发机场三字代码
				segment.setStartairport(segmentJson.getString("startairport"));
				//出发机场名称
				segment.setStartairportname(segmentJson.getString("startairportname"));
				//到达机场三字代码
				segment.setEndairport(segmentJson.getString("endairport"));
				//到达机场名称
				segment.setEndairportname(segmentJson.getString("endairportname"));
				//机型
				segment.setFlightmodel(segmentJson.getString("flightmodel"));
				//机型描述
				segment.setFlightdesc(segmentJson.getString("flightdesc"));
				//价格
				segment.setPrice(Float.parseFloat(converNull(segmentJson.getString("price"),0f).toString()));
				//退改签规定
				segment.setRules(segmentJson.getString("rules"));
				//航程类型
				segment.setTraveltype(Integer.parseInt(segmentJson.getString("traveltype")));
				//全价价格
				segment.setYprice(Float.parseFloat(converNull(segmentJson.getString("yprice"),0f).toString()));
				lissegtempt.add(segment);
			}
        }
		return lissegtempt;
	}

	/**
	 * 进入国内机票页面
	 * @author gaoliang
	 * @Date 2011-11-21
	 * @return 国内机票页面
	 * @throws Exception
	 */
	public String toTicket() throws Exception {

		System.out.println("来到了国内机票页面!!!");
		//从缓存中得到航空公司信息
		listAirCompany=Server.getInstance().getTicketSearchService().getAircompanyCache();
		//查询帮助信息
		//添加人:陈星
		//添加时间:2011-11-21
		seachInfocontent();
		//查询资讯信息
		//添加人:陈星
		//添加时间:2011-11-21
		seachInformationinfo();
		return "toticket";

	}

	/**
	 * 未来30天最低价查询
	 * @return 未来30天数据
	 * @author gaoliang
	 * @Date 2011-11-21
	 * @throws Exception
	 */
	public void getflashdata() throws Exception {

		HttpServletRequest requestIP = ServletActionContext.getRequest();
		String userip = getRemortIP(requestIP);
		System.out.println("访问IP===" + userip);
		userip = "183.60.161.17:8800";

		//

		InetAddress addr = InetAddress.getLocalHost();
		String ip = addr.getHostAddress();//获得本机IP

		System.out.println("本机IP==" + ip);
		//userip=ip;
		//

		String date = "";
		StringBuffer buffer = new StringBuffer();
		try {

			URL url = new URL(
					"http://jipiao.quna.com/ShowChartServlet?srcCity="
							+ s_depcitycode + "&dstCity=" + s_arrcitycode
							+ "&randno=" + randno);

			URLConnection urlConnection = url.openConnection();
			urlConnection.setRequestProperty("Accept-Charset", "utf-8");
			InputStream inputStream = urlConnection.getInputStream();

			BufferedReader reader = new BufferedReader(new InputStreamReader(
					inputStream, "utf-8"));

			while ((date = reader.readLine()) != null) {
				buffer.append(date + "\n");
			}

			//   JSONObject o = JSONObject.fromObject(buffer.toString());
			System.out.println("date===" + date);

		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/plain; charset=utf-8");
		PrintWriter out = response.getWriter();
		String strReturn = "";
		strReturn = buffer.toString();
		//正则表达式替换url链接
		strReturn = strReturn
				.replaceAll(
						"[h][t][t][p][:][/][/][j][i][p][i][a][o][.][q][u][n][a][.][c][o][m][/][a-zA-Z]{1,}[/][a-zA-Z]{3}[_][a-zA-Z]{3}[_][0-9]{8}[.][h][t][m][l]",
						"http://"
								+ "localhost:8080"
								+ "/gx_website/domesticticket!toTicketList.jspx?s_depcitycode="
								+ s_depcitycode + "&s_arrcitycode=" + s_arrcitycode
								+ "&s_startdate=2011-5-6&s_traveltype=1"+"&s_depcityname="+s_depcityname+"&s_arrcityname="+s_depcityname);

		strReturn = strReturn.replace("dc3912", "0066FF").replace("红点", "蓝点");

		//将代理商名称替换
		String[] strarr = getAgentName(strReturn, s_depcitycode, s_arrcitycode).split(",");
		for (int i = 0; i < strarr.length; i++) {
			if (strarr[i].length() > 0) {
				strReturn = strReturn.replace(strarr[i], "");
			}
		}
		out.print(getRightFlightDate(strReturn));
		out.flush();
		out.close();
		
	}
   
	  public String getAgentName(String strData, String strFromCity, String strToCity)
	    {
	        String strReturn = "";
	        //正则表达式解析
	        String strPrice = "";
	        String strAirCompanyCode = "";
	        String strAirCompanyName = "";
	        String strTime = "";
	        String strDate = "";
	        String strDiscount = "";
	        String strAgentName = "";

	        //第一步  使用values来分，第一项：样式信息，第二项：所有低价信息
	        Pattern pairAll = Pattern.compile("[v][a][l][u][e][s]");
			String[] airAll=pairAll.split(strData);

	        //第二步  使用value来分，将第二项低价信息拆分成数组
			Pattern pairdetails=Pattern.compile("[v][a][l][u][e]");
			
	        String[] airdetails = pairdetails.split(airAll[1]);

	        for (int i = 1; i < airdetails.length; i++)
	        {
	            //第三步  使用,来拆分每一项
	            String[] airItems = airdetails[i].split(",");
	            if (airItems.length >= 2)
	            {
	                strPrice = airItems[0].replace("\":", "");
	                Pattern pairotheritem=Pattern.compile("\n");
	                String[] airotheritem = pairotheritem.split(airItems[1]);
	                try
	                {
	                    //中国联合航空公司KN2948
	                    strAirCompanyName = airotheritem[0].replace("\"tip\":\"", "");
	                    //折扣
	                    String[] strTemp1 = airotheritem[1].split("[(]");
	                    strDiscount = strTemp1[1].replace(")", "");
	                    //日期
	                    String[] strTemp2 = airotheritem[2].split("[(]");
	                    strDate = strTemp2[0].replace("[)]", "");
	                    //时间
	                    strTime = airotheritem[4];
	                    strAgentName = airotheritem[5];

	                    strReturn += strAgentName.replace("\"", "") + ",";
	                }
	                catch(Exception ex)
	                {
	                }

	            }
	        }

	        return strReturn;

	    }
	
	
	public String getRemortIP(HttpServletRequest request) {

		if (request.getHeader("x-forwarded-for") == null) {
			System.out.println("IP==" + request.getRemoteAddr());
			return request.getRemoteAddr();

		}
		System.out.println("IP2==" + request.getHeader("x-forwarded-for"));
		return request.getHeader("x-forwarded-for");

	}

	protected String getRightFlightDate(String strData) {
		String strReturn = "";
		//正则表达式解析
		String strPrice = "";
		String strAirCompanyCode = "";
		String strAirCompanyName = "";
		String strTime = "";
		String strDate = "";
		String strDiscount = "";
		String strAgentName = "";
		String strTemp = "";

		//第一步  使用values来分，第一项：样式信息，第二项：所有低价信息
		Pattern pairAll = Pattern.compile("[v][a][l][u][e][s]");
		String[] airAll = pairAll.split(strData);

		//第二步  使用value来分，将第二项低价信息拆分成数组
		Pattern pairdetails = Pattern.compile("[v][a][l][u][e]");
		String[] airdetails = pairdetails.split(airAll[1]);
		strTemp += airdetails[0] + "value";
		for (int i = 1; i < airdetails.length; i++) {
			//第三步  使用,来拆分每一项
			String[] airItems = airdetails[i].split(",");
			if (airItems.length >= 2) {
				strPrice = airItems[0].replace("\":", "");
				Pattern pairotheritem = Pattern.compile("\n");
				String[] airotheritem = pairotheritem.split(airItems[1]);
				try {
					//中国联合航空公司KN2948
					strAirCompanyName = airotheritem[0].replace("\"tip\":\"",
							"");
					//折扣
					String[] strTemp1 = airotheritem[1].split("[(]");
					strDiscount = strTemp1[1].replace("[)]", "");
					//日期
					String[] strTemp2 = airotheritem[2].split("[(]");
					strDate = strTemp2[0].replace("[)]", "");
					//时间
					strTime = airotheritem[4];
					strAgentName = airotheritem[5];
				} catch (Exception ex) {
				}
			}

			strTemp += airdetails[i].replace("2011-5-6", strDate) + "value";

		}
		strReturn = airAll[0] + "values" + strTemp;
		return strReturn;

	}
	
	public void ajaxgetLowersegment() throws IOException {
		getLowsegment();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/plain; charset=utf-8");
		PrintWriter out = response.getWriter();
		out.print(this.lowersegmentstr);
		out.flush();
		out.close();
	}
	
	public void getLowsegment(){
		HttpServletRequest rquest = ServletActionContext.getRequest();
		s_depcitycode = rquest.getParameter("fromcity");
		if (!isNotNullOrEpt(s_depcitycode)) {
			s_depcitycode = "PEK";// 默认北京。
		}
		Timestamp today = new Timestamp(System.currentTimeMillis());
		Timestamp tomorrowafter = new Timestamp(System.currentTimeMillis());
		tomorrowafter.setDate(today.getDate() + 3);
		this.setS_startdate(super.formatTimestamp(today));
		this.setS_backdate(super.formatTimestamp(tomorrowafter));
		this.setS_depcitycode(s_depcitycode);
		this.pageinfo.setPagerow(30);
		this.setPageinfo(pageinfo);
		List listlower = this.getLowerSegment();
		String currenycity = "";
		for (Object obj : listlower) {
			Map<String, List<Map>> lowermap = new HashMap<String, List<Map>>();
			Map map = (HashMap) obj;
			String tocity = converNull(map.get("TOCITY"), "").toString();
			if (currenycity.equals(tocity) || tocity.equals("")) {
				continue;
			} else {
				List<Map> list = new ArrayList<Map>();
				for (Object objs : listlower) {
					Map m = (HashMap) objs;
					if (tocity.equals(converNull(m.get("TOCITY"), "-1")
							.toString())) {
						list.add(m);
					}
					if (list.size() == 3)
						break;
				}
				currenycity = tocity;
				lowermap.put(tocity, list);
				lowersegment.add(lowermap);

			}

		}
		this.lowersegmentstr = this.getLowsegmentHtml();	
	}
	/**
	 * @return 
	 * 获得特价机票
	 */
	public List getLowerSegment(){
		String sql="SELECT TOP 30 * FROM view_lowestprice WHERE 1=1";
		if(isNotNullOrEpt(s_arrcitycode)){
			sql+=" AND C_TOCITY='"+s_arrcitycode+"'";
		}
		if(isNotNullOrEpt(s_depcitycode)){
			sql+=" AND C_FROMCITY='"+s_depcitycode+"'";
		}
		String time=this.getCheckTime(s_startdate, s_backdate, "C_FROMDATE");
		if(isNotNullOrEpt(time)){
			sql+=" AND ("+time +")";
		}	
		System.out.println("sql=="+sql);
	  List list= Server.getInstance().getSystemService().findMapResultBySql(sql, null);
	  return list;
	}
	public String getLowsegmentHtml() {
		StringBuffer buffer = new StringBuffer();
		System.out.println(lowersegment.size());
		if (lowersegment.size() == 0) {
			buffer
					.append("<td width=\"660\" height=\"200\" align='center'>暂无数据"
							+ "</td>");
		} else {
			for (int i = 0; i < 2; i++) {
				buffer.append("<td width=\"220\" valign='top'>");
				buffer
						.append("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"line-height:16px;\">");
				for (int j = 0; j < 3; j++) {
					Map map = new HashMap();
					try {
						map = (HashMap) lowersegment.remove(0);
					} catch (Exception e) {
						break;
					}
					Map.Entry<String, List> entry = (Map.Entry<String, List>) map
							.entrySet().iterator().next();
					buffer
							.append("<tr><td class=\"he16\" colspan=\"4\">&nbsp;</td></tr>");
					buffer.append("<tr>");
					buffer
							.append("<td rowspan=\"2\"><img src=\"images/sanjiao.gif\" width=\"13\" height=\"31\" align=\"absmiddle\" />");
					buffer.append(entry.getKey());
					buffer.append("</td>");
					List list = entry.getValue();
					String date = "";

					for (Object obj : list) {
						Map m = (HashMap) obj;

						buffer
								.append("<td class=\"huangf60_x\"  style=\"cursor: pointer;color:red;\""
										+ " onclick=\"window.location.href='airsearch!tSearch.jspx?StartAirportCode="
										+ s_depcitycode
										+ "&EndAirportCode="
										+ m.get("C_TOCITY").toString()
										+ "&FromDate="
										+ formatStringTimetoyyyymmdd(m.get(
												"C_FROMDATE").toString())
										+ "&TravelType=1'\">&yen;"
										+ formatMoneytoone(Float
												.valueOf(converNull(
														m.get("C_PRICE"), 0)
														.toString())) + "</td>");
						date += "<td class=\"lan06c\">"
								+ formatStringTime(m.get("C_FROMDATE")
										.toString()) + "</td>";
					}
					buffer.append("</tr>");
					buffer.append("<tr>");
					buffer.append(date);
					buffer.append("</tr>");
					buffer
							.append("<tr><td class=\"he16\" colspan=\"4\">&nbsp;</td></tr>");
				}
				buffer.append("</table>");
				buffer.append("</td>");
			}
		}
		return buffer.toString();
	}
	/**
	 * 根据帮助信息类型ID查询NAME
	 * @author 陈星
	 * @Date 2011-11-21
	 * @param id 帮助信息类型ID
	 * @param 
	 * @return  帮助信息类型name
	 */
	public String GetInfoTypeNameById(long id){
		
		return Server.getInstance().getMemberService().findHelpcenter(id).getName();
	}
	/**
	 * 查询帮助信息
	 * @author 陈星
	 * @Date 2011-11-21
	 * @param 
	 * @param 
	 * @return  帮助信息列表
	 */
	public void seachInfocontent(){
		
		String where =" where 1=1 and "+Helpcenterinfo.COL_typeid+" = ( SELECT "+Helpcenter.COL_id+" FROM "+Helpcenter.TABLE+" where "+Helpcenter.COL_name+" ='相关信息')";
		Listhelpcenterinfo =Server.getInstance().getMemberService().findAllHelpcenterinfo(where, " ORDER BY ID DESC ", 20, 0);
		if(Listhelpcenterinfo.size()>0){
		typeid=Listhelpcenterinfo.get(0).getTypeid();
		}
	}
	/**
	 * 查询最新资讯信息
	 * @author 陈星
	 * @Date 2011-11-21
	 * @param 
	 * @param 
	 * @return  资讯信息列表
	 */
	public void seachInformationinfo(){
		
		String where=" where 1=1 ";
		ListInformationinfo=Server.getInstance().getMemberService().findAllInformationinfo(where, " ORDER BY ID DESC ", 7, 0);
	
	}
	
	@Override
	public Object getModel() {
		// TODO Auto-generated method stub
		return null;
	}

	public int getS_traveltype() {
		return s_traveltype;
	}

	public void setS_traveltype(int s_traveltype) {
		this.s_traveltype = s_traveltype;
	}

	public String getS_depcitycode() {
		return s_depcitycode;
	}

	public void setS_depcitycode(String s_depcitycode) {
		this.s_depcitycode = s_depcitycode;
	}

	public String getS_arrcitycode() {
		return s_arrcitycode;
	}

	public void setS_arrcitycode(String s_arrcitycode) {
		this.s_arrcitycode = s_arrcitycode;
	}

	public String getS_startdate() {
		return s_startdate;
	}

	public void setS_startdate(String s_startdate) {
		this.s_startdate = s_startdate;
	}

	public String getS_backdate() {
		return s_backdate;
	}

	public void setS_backdate(String s_backdate) {
		this.s_backdate = s_backdate;
	}

	public List<FlightInfo> getListFlightInfoAll() {
		return listFlightInfoAll;
	}

	public void setListFlightInfoAll(List<FlightInfo> listFlightInfoAll) {
		this.listFlightInfoAll = listFlightInfoAll;
	}

	public String getS_aircompanycode() {
		return s_aircompanycode;
	}

	public void setS_aircompanycode(String s_aircompanycode) {
		this.s_aircompanycode = s_aircompanycode;
	}

	public List<Aircompany> getListAirCompany() {
		return listAirCompany;
	}

	public void setListAirCompany(List<Aircompany> listAirCompany) {
		this.listAirCompany = listAirCompany;
	}


		public List<Helpcenterinfo> getListhelpcenterinfo() {
		return Listhelpcenterinfo;
	}

	public void setListhelpcenterinfo(List<Helpcenterinfo> listhelpcenterinfo) {
		Listhelpcenterinfo = listhelpcenterinfo;
	}

		public long getTypeid() {
			return typeid;
		}

		public void setTypeid(long typeid) {
			this.typeid = typeid;
		}

		public List<Informationinfo> getListInformationinfo() {
			return ListInformationinfo;
		}

		public void setListInformationinfo(List<Informationinfo> listInformationinfo) {
			ListInformationinfo = listInformationinfo;
		}

		public String getS_jasonsegmentinfo() {
			return s_jasonsegmentinfo;
		}

		public void setS_jasonsegmentinfo(String s_jasonsegmentinfo) {
			this.s_jasonsegmentinfo = s_jasonsegmentinfo;
		}

		public String getS_depcityname() {
			return s_depcityname;
		}

		public void setS_depcityname(String s_depcityname) {
			this.s_depcityname = s_depcityname;
		}

		public String getS_arrcityname() {
			return s_arrcityname;
		}

		public void setS_arrcityname(String s_arrcityname) {
			this.s_arrcityname = s_arrcityname;
		}

		public String getRandno() {
			return randno;
		}

		public void setRandno(String randno) {
			this.randno = randno;
		}

		public Integer getIsBackOrTo() {
			return isBackOrTo;
		}

		public void setIsBackOrTo(Integer isBackOrTo) {
			this.isBackOrTo = isBackOrTo;
		}

		public FlightSearch getFlightSearch() {
			return flightSearch;
		}

		public void setFlightSearch(FlightSearch flightSearch) {
			this.flightSearch = flightSearch;
		}

		public List<Segmentinfo> getListsegmentinfo() {
			return listsegmentinfo;
		}

		public void setListsegmentinfo(List<Segmentinfo> listsegmentinfo) {
			this.listsegmentinfo = listsegmentinfo;
		}

		public int getS_travelflag() {
			return s_travelflag;
		}

		public void setS_travelflag(int s_travelflag) {
			this.s_travelflag = s_travelflag;
		}

		public String getLowersegmentstr() {
			return lowersegmentstr;
		}

		public void setLowersegmentstr(String lowersegmentstr) {
			this.lowersegmentstr = lowersegmentstr;
		}

		public List getLowersegment() {
			return lowersegment;
		}

		public void setLowersegment(List lowersegment) {
			this.lowersegment = lowersegment;
		}
}
