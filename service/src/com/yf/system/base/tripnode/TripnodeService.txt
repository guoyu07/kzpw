	
  
  
   //粘贴到Service接口类
 	/**
	 * 创建 注意事项
	 * @param id
	 * @return deleted count 
	 */
	public Tripnode createTripnode(Tripnode tripnode) throws SQLException;
	
	/**
	 * 删除 注意事项
	 * @param id
	 * @return deleted count 
	 */
	public int deleteTripnode(long id);
	
	
	/**
	 * 修改 注意事项
	 * @param id
	 * @return updated count 
	 */
	public int updateTripnode(Tripnode tripnode);

		
	/**
	 * 修改 注意事项但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateTripnodeIgnoreNull(Tripnode tripnode);
		
	
	/**
	 * 查找 注意事项
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllTripnode(String where, String orderby,int limit,int offset);
		
	
	/**
	 * 查找 注意事项
	 * @param id
	 * @return
	 */
	public Tripnode findTripnode(long id);
	
	/**
	 * 查找 注意事项 by language
	 * @param id
	 * @return
	 */
	public Tripnode findTripnodebylanguage(long id ,Integer language);
	
	/** 
	 * 查找 注意事项
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllTripnodeForPageinfo(String where, String orderby,PageInfo pageinfo);
		
	/** 
	 * 根据Sql查找注意事项
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllTripnodeBySql(String sql,int limit,int offset);
	
	
	/**
	 * 执行Sql 注意事项
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteTripnodeBySql(String sql);
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countTripnodeBySql(String sql);
	
	
	//------------------------------------------------------------------------
	//粘贴到Service实现类
	
	private ITripnodeComponent tripnodeComponent;
	  
 	
 	public ITripnodeComponent getTripnodeComponent() {
		return tripnodeComponent;
	}
	public void setTripnodeComponent(ITripnodeComponent  tripnodeComponent) {
		this.tripnodeComponent = tripnodeComponent;
	}
	/**
	 * 创建 注意事项
	 * @param id
	 * @return deleted count 
	 */
	public Tripnode createTripnode(Tripnode tripnode) throws SQLException{
	
		return tripnodeComponent.createTripnode(tripnode);
	}
	/**
	 * 删除 注意事项
	 * @param id
	 * @return deleted count 
	 */
	public int deleteTripnode(long id){
	
		return tripnodeComponent.deleteTripnode(id);
	}
	
	
	/**
	 * 修改 注意事项
	 * @param id
	 * @return updated count 
	 */
	public int updateTripnode(Tripnode tripnode){
		return tripnodeComponent.updateTripnode(tripnode);
	
	}

		
	/**
	 * 修改 注意事项但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateTripnodeIgnoreNull(Tripnode tripnode){
			return tripnodeComponent.updateTripnodeIgnoreNull(tripnode);
	
	}
	
	/**
	 * 查找 注意事项
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllTripnode(String where, String orderby,int limit,int offset){
		return tripnodeComponent.findAllTripnode(where, orderby,limit,offset);
	}
		
	
	/**
	 * 查找 注意事项
	 * @param id
	 * @return
	 */
	public Tripnode findTripnode(long id){
		return tripnodeComponent.findTripnode(id);
	}
	
	/**
	 * 查找 注意事项
	 * @param id
	 * @return
	 */
	public Tripnode findTripnodebylanguage(long id,Integer language){
		return tripnodeComponent.findTripnodebylanguage(id,language);
	}
	/** 
	 * 查找 注意事项
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllTripnodeForPageinfo(String where, String orderby,PageInfo pageinfo){
		return tripnodeComponent.findAllTripnode(where, orderby,pageinfo);
	}
		
	/** 
	 * 根据Sql查找注意事项
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllTripnodeBySql(String sql,int limit,int offset){
		return tripnodeComponent.findAllTripnode(sql,limit,offset);
	}
	
	
	/**
	 * 执行Sql 注意事项
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteTripnodeBySql(String sql){
		return tripnodeComponent.excuteTripnodeBySql(sql);
	}
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countTripnodeBySql(String sql){
		return tripnodeComponent.countTripnodeBySql(sql);
	}
	
	

