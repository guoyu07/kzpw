	
  
  
   //粘贴到Service接口类
 	/**
	 * 创建 隐扣设置
	 * @param id
	 * @return deleted count 
	 */
	public Backpoint createBackpoint(Backpoint backpoint) throws SQLException;
	
	/**
	 * 删除 隐扣设置
	 * @param id
	 * @return deleted count 
	 */
	public int deleteBackpoint(long id);
	
	
	/**
	 * 修改 隐扣设置
	 * @param id
	 * @return updated count 
	 */
	public int updateBackpoint(Backpoint backpoint);

		
	/**
	 * 修改 隐扣设置但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateBackpointIgnoreNull(Backpoint backpoint);
		
	
	/**
	 * 查找 隐扣设置
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllBackpoint(String where, String orderby,int limit,int offset);
		
	
	/**
	 * 查找 隐扣设置
	 * @param id
	 * @return
	 */
	public Backpoint findBackpoint(long id);
	
	
	/** 
	 * 查找 隐扣设置
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllBackpointForPageinfo(String where, String orderby,PageInfo pageinfo);
		
	/** 
	 * 根据Sql查找隐扣设置
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllBackpointBySql(String sql,int limit,int offset);
	
	
	/**
	 * 执行Sql 隐扣设置
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteBackpointBySql(String sql);
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countBackpointBySql(String sql);
	
	
	//------------------------------------------------------------------------
	//粘贴到Service实现类
	
	private IBackpointComponent backpointComponent;
	  
 	
 	public IBackpointComponent getBackpointComponent() {
		return backpointComponent;
	}
	public void setBackpointComponent(IBackpointComponent  backpointComponent) {
		this.backpointComponent = backpointComponent;
	}
	/**
	 * 创建 隐扣设置
	 * @param id
	 * @return deleted count 
	 */
	public Backpoint createBackpoint(Backpoint backpoint) throws SQLException{
	
		return backpointComponent.createBackpoint(backpoint);
	}
	/**
	 * 删除 隐扣设置
	 * @param id
	 * @return deleted count 
	 */
	public int deleteBackpoint(long id){
	
		return backpointComponent.deleteBackpoint(id);
	}
	
	
	/**
	 * 修改 隐扣设置
	 * @param id
	 * @return updated count 
	 */
	public int updateBackpoint(Backpoint backpoint){
		return backpointComponent.updateBackpoint(backpoint);
	
	}

		
	/**
	 * 修改 隐扣设置但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateBackpointIgnoreNull(Backpoint backpoint){
			return backpointComponent.updateBackpointIgnoreNull(backpoint);
	
	}
	
	/**
	 * 查找 隐扣设置
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllBackpoint(String where, String orderby,int limit,int offset){
		return backpointComponent.findAllBackpoint(where, orderby,limit,offset);
	}
		
	
	/**
	 * 查找 隐扣设置
	 * @param id
	 * @return
	 */
	public Backpoint findBackpoint(long id){
		return backpointComponent.findBackpoint(id);
	}
	
	/** 
	 * 查找 隐扣设置
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllBackpointForPageinfo(String where, String orderby,PageInfo pageinfo){
		return backpointComponent.findAllBackpoint(where, orderby,pageinfo);
	}
		
	/** 
	 * 根据Sql查找隐扣设置
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllBackpointBySql(String sql,int limit,int offset){
		return backpointComponent.findAllBackpoint(sql,limit,offset);
	}
	
	
	/**
	 * 执行Sql 隐扣设置
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteBackpointBySql(String sql){
		return backpointComponent.excuteBackpointBySql(sql);
	}
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countBackpointBySql(String sql){
		return backpointComponent.countBackpointBySql(sql);
	}
	
	

