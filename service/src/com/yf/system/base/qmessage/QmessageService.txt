	
  
  
   //粘贴到Service接口类
 	/**
	 * 创建 Q信箱
	 * @param id
	 * @return deleted count 
	 */
	public Qmessage createQmessage(Qmessage qmessage) throws SQLException;
	
	/**
	 * 删除 Q信箱
	 * @param id
	 * @return deleted count 
	 */
	public int deleteQmessage(long id);
	
	
	/**
	 * 修改 Q信箱
	 * @param id
	 * @return updated count 
	 */
	public int updateQmessage(Qmessage qmessage);

		
	/**
	 * 修改 Q信箱但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateQmessageIgnoreNull(Qmessage qmessage);
		
	
	/**
	 * 查找 Q信箱
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllQmessage(String where, String orderby,int limit,int offset);
		
	
	/**
	 * 查找 Q信箱
	 * @param id
	 * @return
	 */
	public Qmessage findQmessage(long id);
	
	
	/** 
	 * 查找 Q信箱
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllQmessageForPageinfo(String where, String orderby,PageInfo pageinfo);
		
	/** 
	 * 根据Sql查找Q信箱
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllQmessageBySql(String sql,int limit,int offset);
	
	
	/**
	 * 执行Sql Q信箱
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteQmessageBySql(String sql);
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countQmessageBySql(String sql);
	
	
	//------------------------------------------------------------------------
	//粘贴到Service实现类
	
	private IQmessageComponent qmessageComponent;
	  
 	
 	public IQmessageComponent getQmessageComponent() {
		return qmessageComponent;
	}
	public void setQmessageComponent(IQmessageComponent  qmessageComponent) {
		this.qmessageComponent = qmessageComponent;
	}
	/**
	 * 创建 Q信箱
	 * @param id
	 * @return deleted count 
	 */
	public Qmessage createQmessage(Qmessage qmessage) throws SQLException{
	
		return qmessageComponent.createQmessage(qmessage);
	}
	/**
	 * 删除 Q信箱
	 * @param id
	 * @return deleted count 
	 */
	public int deleteQmessage(long id){
	
		return qmessageComponent.deleteQmessage(id);
	}
	
	
	/**
	 * 修改 Q信箱
	 * @param id
	 * @return updated count 
	 */
	public int updateQmessage(Qmessage qmessage){
		return qmessageComponent.updateQmessage(qmessage);
	
	}

		
	/**
	 * 修改 Q信箱但忽略空值 
	 * @param id
	 * @return 
	 */
	public int updateQmessageIgnoreNull(Qmessage qmessage){
			return qmessageComponent.updateQmessageIgnoreNull(qmessage);
	
	}
	
	/**
	 * 查找 Q信箱
	 * @param where
	 * @param orderby
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllQmessage(String where, String orderby,int limit,int offset){
		return qmessageComponent.findAllQmessage(where, orderby,limit,offset);
	}
		
	
	/**
	 * 查找 Q信箱
	 * @param id
	 * @return
	 */
	public Qmessage findQmessage(long id){
		return qmessageComponent.findQmessage(id);
	}
	
	/** 
	 * 查找 Q信箱
	 * @param where
	 * @param orderby
	 * @param pageinfo
	 * @return
	 */
	public List findAllQmessageForPageinfo(String where, String orderby,PageInfo pageinfo){
		return qmessageComponent.findAllQmessage(where, orderby,pageinfo);
	}
		
	/** 
	 * 根据Sql查找Q信箱
	 * @param sql
	 * @param limit
	 * @param offset
	 * @return
	 */
	public List findAllQmessageBySql(String sql,int limit,int offset){
		return qmessageComponent.findAllQmessage(sql,limit,offset);
	}
	
	
	/**
	 * 执行Sql Q信箱
	 * @param sql 
	 * @return updated count 
	 */
	public int excuteQmessageBySql(String sql){
		return qmessageComponent.excuteQmessageBySql(sql);
	}
	
	/**
	 * 执行Sql 
	 * @param sql 
	 * @return  count 
	 */
	public int countQmessageBySql(String sql){
		return qmessageComponent.countQmessageBySql(sql);
	}
	
	

